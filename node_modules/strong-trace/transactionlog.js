"use strict";

module.exports = TransactionLog

var Stats = require("stats-incremental")
var xtend = require("xtend")

var DEFAULTS = {
  raw_subset: false,
  subset_stats: true,
  transactions_per_ms: true,
}

function TransactionLog(config) {
  if (!(this instanceof TransactionLog)) return new TransactionLog(config)
  this.config = xtend(DEFAULTS, config)
  this._transactions = {}
  this.lastReaped = Date.now()
}

// Adds transaction to subset & updates stats
// TODO if deemed interesting, return "true" to instruct the tracer
//      to send a one-off non-aggregate trace for this transaction
TransactionLog.prototype.update = function update(id, duration) {
  var tx = this._transactions[id]
  if (tx === undefined) {
    tx = {
      subset: [],
      stats: Stats(),
      subsetStats: Stats(),
      transactions_per_ms: Stats(),
    }
  }

  tx.subset.push(duration)
  tx.stats.update(duration)
  tx.subsetStats.update(duration)

  this._transactions[id] = tx
}

TransactionLog.prototype.reapSubset = function reapSubset() {
  var txIds = Object.keys(this._transactions)

  var now = Date.now()
  var subset = {
    start: this.lastReaped,
    end: now,
    transactions: {}
  }

  for (var i = 0; i < txIds.length; i++) {
    var id = txIds[i]
    var tx = this._transactions[id]
    if (tx.subset.length === 0) {
      tx.transactions_per_ms.update(0)
      continue
    }
    tx.transactions_per_ms.update(tx.subset.length / (now - this.lastReaped))
    subset.transactions[id] = {
      stats: tx.stats.getAll(),
    }
    if (this.config.raw_subset) {
      subset.transactions[id].subset = tx.subset
    }
    if (this.config.subset_stats) {
      subset.transactions[id].subset_stats = tx.subsetStats.getAll()
    }
    if (this.config.transactions_per_ms) {
      subset.transactions[id].transactions_per_ms = tx.transactions_per_ms.getAll()
    }
    tx.subset = []
    tx.subsetStats = Stats()
  }
  this.lastReaped = Date.now()
  return subset
}

TransactionLog.prototype.clearAll = function clearAll() {
  this._transactions = {}
  this.lastReaped = Date.now()
}
