"use strict";

module.exports = wrap

function wrap(tracer) {
  var fs = require("fs")
  //  fs.rename(oldPath, newPath, callback)
  fs.rename = tracer.wrapCoreLinker("fs", "rename", fs.rename)
  //  fs.renameSync(oldPath, newPath)
  fs.renameSync = tracer.wrapCoreSync("fs", "renameSync", fs.renameSync)
  //  fs.ftruncate(fd, len, callback)
  fs.ftruncate = tracer.wrapCoreLinker("fs", "ftruncate", fs.ftruncate)
  //  fs.ftruncateSync(fd, len)
  fs.ftruncateSync = tracer.wrapCoreSync("fs", "ftruncateSync", fs.ftruncateSync)
  //  fs.truncate(path, len, callback)
  fs.truncate = tracer.wrapCoreLinker("fs", "truncate", fs.truncate)
  //  fs.truncateSync(path, len)
  fs.truncateSync = tracer.wrapCoreSync("fs", "truncateSync", fs.truncateSync)
  //  fs.chown(path, uid, gid, callback)
  fs.chown = tracer.wrapCoreLinker("fs", "chown", fs.chown)
  //  fs.chownSync(path, uid, gid)
  fs.chownSync = tracer.wrapCoreSync("fs", "chownSync", fs.chownSync)
  //  fs.fchown(fd, uid, gid, callback)
  fs.fchown = tracer.wrapCoreLinker("fs", "fchown", fs.fchown)
  //  fs.fchownSync(fd, uid, gid)
  fs.fchownSync = tracer.wrapCoreSync("fs", "fchownSync", fs.fchownSync)
  //  fs.lchown(path, uid, gid, callback)
  fs.lchown = tracer.wrapCoreLinker("fs", "lchown", fs.chown)
  //  fs.lchownSync(path, uid, gid)
  fs.lchownSync = tracer.wrapCoreSync("fs", "lchownSync", fs.lchownSync)
  //  fs.chmod(path, mode, callback)
  fs.chmod = tracer.wrapCoreLinker("fs", "chmod", fs.chmod)
  //  fs.chmodSync(path, mode)
  fs.chmodSync = tracer.wrapCoreSync("fs", "chmodSync", fs.chmodSync)
  //  fs.fchmod(fd, mode, callback)
  fs.fchmod = tracer.wrapCoreLinker("fs", "fchmod", fs.fchmod)
  //  fs.fchmodSync(fd, mode)
  fs.fchmodSync = tracer.wrapCoreSync("fs", "fchmodSync", fs.fchmodSync)
  //  fs.lchmod(path, mode, callback)
  fs.lchmod = tracer.wrapCoreLinker("fs", "lchmod", fs.lchmod)
  //  fs.lchmodSync(path, mode)
  fs.lchmodSync = tracer.wrapCoreSync("fs", "lchmodSync", fs.lchmodSync)
  //  fs.stat(path, callback)
  fs.stat = tracer.wrapCoreLinker("fs", "stat", fs.stat)
  //  fs.lstat(path, callback)
  fs.lstat = tracer.wrapCoreLinker("fs", "lstat", fs.lstat)
  //  fs.fstat(fd, callback)
  fs.fstat = tracer.wrapCoreLinker("fs", "fstat", fs.fstat)
  //  fs.statSync(path)
  fs.statSync = tracer.wrapCoreSync("fs", "statSync", fs.statSync)
  //  fs.lstatSync(path)
  fs.lstatSync = tracer.wrapCoreSync("fs", "lstatSync", fs.lstatSync)
  //  fs.fstatSync(fd)
  fs.fstatSync = tracer.wrapCoreSync("fs", "fstatSync", fs.fstatSync)
  //  fs.link(srcpath, dstpath, callback)
  fs.link = tracer.wrapCoreLinker("fs", "link", fs.link)
  //  fs.linkSync(srcpath, dstpath)
  fs.linkSync = tracer.wrapCoreSync("fs", "linkSync", fs.linkSync)
  //  fs.symlink(srcpath, dstpath, [type], callback)
  fs.symlink = tracer.wrapCoreLinker("fs", "symlink", fs.symlink)
  //  fs.symlinkSync(srcpath, dstpath, [type])
  fs.symlinkSync = tracer.wrapCoreSync("fs", "symlinkSync", fs.symlinkSync)
  //  fs.readlink(path, callback)
  fs.readlink = tracer.wrapCoreLinker("fs", "readlink", fs.readlink)
  //  fs.readlinkSync(path)
  fs.readlinkSync = tracer.wrapCoreSync("fs", "readlinkSync", fs.readlinkSync)
  //  fs.realpath(path, [cache], callback)
  fs.realpath = tracer.wrapCoreLinker("fs", "realpath", fs.realpath)
  //  fs.realpathSync(path, [cache])
  fs.realpathSync = tracer.wrapCoreSync("fs", "realpathSync", fs.realpathSync)
  //  fs.unlink(path, callback)
  fs.unlink = tracer.wrapCoreLinker("fs", "unlink", fs.unlink)
  //  fs.unlinkSync(path)
  fs.unlinkSync = tracer.wrapCoreSync("fs", "unlinkSync", fs.unlinkSync)
  //  fs.rmdir(path, callback)
  fs.rmdir = tracer.wrapCoreLinker("fs", "rmdir", fs.rmdir)
  //  fs.rmdirSync(path)
  fs.rmdirSync = tracer.wrapCoreSync("fs", "rmdirSync", fs.rmdirSync)
  //  fs.mkdir(path, [mode], callback)
  fs.mkdir = tracer.wrapCoreLinker("fs", "mkdir", fs.mkdir)
  //  fs.mkdirSync(path, [mode])
  fs.mkdirSync = tracer.wrapCoreSync("fs", "mkdirSync", fs.mkdirSync)
  //  fs.readdir(path, callback)
  fs.readdir = tracer.wrapCoreLinker("fs", "readdir", fs.readdir)
  //  fs.readdirSync(path)
  fs.readdirSync = tracer.wrapCoreSync("fs", "readdirSync", fs.readdirSync)
  //  fs.close(fd, callback)
  fs.close = tracer.wrapCoreLinker("fs", "close", fs.close)
  //  fs.closeSync(fd)
  fs.closeSync = tracer.wrapCoreSync("fs", "closeSync", fs.closeSync)
  //  fs.open(path, flags, [mode], callback)
  fs.open = tracer.wrapCoreLinker("fs", "open", fs.open)
  //  fs.openSync(path, flags, [mode])
  fs.openSync = tracer.wrapCoreSync("fs", "openSync", fs.openSync)
  //  fs.utimes(path, atime, mtime, callback)
  fs.utimes = tracer.wrapCoreLinker("fs", "utimes", fs.utimes)
  //  fs.utimesSync(path, atime, mtime)
  fs.utimesSync = tracer.wrapCoreSync("fs", "utimesSync", fs.utimesSync)
  //  fs.futimes(fd, atime, mtime, callback)
  fs.futimes = tracer.wrapCoreLinker("fs", "futimes", fs.futimes)
  //  fs.futimesSync(fd, atime, mtime)
  fs.futimesSync = tracer.wrapCoreSync("fs", "futimesSync", fs.futimesSync)
  //  fs.fsync(fd, callback)
  fs.fsync = tracer.wrapCoreLinker("fs", "fsync", fs.fsync)
  //  fs.fsyncSync(fd)
  fs.fsyncSync = tracer.wrapCoreSync("fs", "fsyncSync", fs.fsyncSync)
  //  fs.write(fd, buffer, offset, length, position, callback)
  fs.write = tracer.wrapCoreLinker("fs", "write", fs.write)
  //  fs.writeSync(fd, buffer, offset, length, position)
  fs.writeSync = tracer.wrapCoreSync("fs", "writeSync", fs.writeSync)
  //  fs.read(fd, buffer, offset, length, position, callback)
  fs.read = tracer.wrapCoreLinker("fs", "read", fs.read)
  //  fs.readSync(fd, buffer, offset, length, position)
  fs.readSync = tracer.wrapCoreSync("fs", "readSync", fs.readSync)
  //  fs.readFile(filename, [options], callback)
  fs.readFile = tracer.wrapCoreLinker("fs", "readFile", fs.readFile)
  //  fs.readFileSync(filename, [options])
  fs.readFileSync = tracer.wrapCoreSync("fs", "readFileSync", fs.readFileSync)
  //  fs.writeFile(filename, data, [options], callback)
  fs.writeFile = tracer.wrapCoreLinker("fs", "writeFile", fs.writeFile)
  //  fs.writeFileSync(filename, data, [options])
  fs.writeFileSync = tracer.wrapCoreSync("fs", "writeFileSync", fs.writeFileSync)
  //  fs.appendFile(filename, data, [options], callback)
  fs.appendFile = tracer.wrapCoreLinker("fs", "appendFile", fs.appendFile)
  //  fs.appendFileSync(filename, data, [options])
  fs.appendFileSync = tracer.wrapCoreSync("fs", "appendFileSync", fs.appendFileSync)
  //  fs.exists(path, callback)
  fs.exists = tracer.wrapCoreLinker("fs", "exists", fs.exists)
  //  fs.existsSync(path)
  fs.existsSync = tracer.wrapCoreSync("fs", "existsSync", fs.existsSync)

  // These are both legacy/unstable likely to be deprecated.
  // TBD fs.watchFile(filename, [options], listener)
  // TBD fs.unwatchFile(filename, [listener])

  //  fs.watch(filename, [options], [listener])
  var fs_watch = fs.watch
  var watchId = tracer.addFunction("fs", "watch")
  fs.watch = function (filename) {
    var traceme = tracer.enter(watchId)

    var watcher
    var options
    var listener

    // based on fs.watch in node core
    if ("object" == typeof arguments[1]) {
      options = arguments[1]
      listener = arguments[2]
    } else {
      options = {}
      listener = arguments[1]
    }

    if (listener != null) {
      listener = tracer.wrapWorkStart(listener, "watch " + filename)
    }

    var watchObj = fs_watch.call(this, filename, options, listener)

    if (listener == null) {
      // intercept 'change' addListener/on
      var al = watchObj.addListener
      watchObj.addListener = function addListener(listener, fn) {
        if (listener === "change") {
          var wrapper = tracer.wrapWorkStart(fn, "watch " + filename)
          return al.call(this, listener, wrapper)
        }
        return al.apply(this, arguments)
      }
      watchObj.on = watchObj.addListener
    }

    if (traceme) {
      tracer.exit(watchId)
    }
    return watchObj
  }

  // TODO the above + timers may be enough for these?
  //  fs.createReadStream(path, [options])
  //  fs.createWriteStream(path, [options])
}
