"use strict";

module.exports = wrap

function wrap(tracer) {
  // setImmediate, setTimeout, and process.nextTick are schedulers of work
  if (global.setImmediate) {
    global.setImmediate = tracer.wrapCoreLinker("global", "setImmediate", global.setImmediate, "setImmediate")
  }
  global.setTimeout = tracer.wrapCoreLinker("global", "setTimeout", global.setTimeout, function (fn, delay) {
    return "setTimeout " + delay + "ms"
  })

  var intervals = {}

  var getLinkName = function (interval) {
    var name = "setInterval " + interval + "ms"
    if (intervals[name] == null) {
      intervals[name] = 1
      return name
    }
    return name + "{" + (++intervals[name]) + "}"
  }

  // setInterval is an `initiator` of work
  var set_interval = global.setInterval
  var fnId = tracer.addFunction("global", "setInterval")
  global.setInterval = function (fn, interval) {
    var traceme = tracer.enter(fnId)
    var linkName = getLinkName(interval)
    var args = Array.apply(null, arguments)
    args[0] = tracer.wrapWorkStart(fn, linkName)
    var rvalue = set_interval.apply(this, args)
    if (traceme) {
      tracer.exit(fnId)
    }
    return rvalue
  }
}
