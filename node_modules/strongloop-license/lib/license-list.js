var License = require('strong-license');
var debug = require('debug')('strongloop-license:list');

module.exports = exports = LicenseList;

// Simple wrapper for loading a list of licenses and performing checks on them

function LicenseList(loaders) {
  if (!(this instanceof LicenseList)) {
    return new LicenseList(loaders);
  }
  this.loaders = [].concat(loaders || []);
  this.licenses = [];
  this.reload();
}

LicenseList.prototype.add = function add(lic) {
  var decodedLicense = new License(lic, 'c374fa24098c7eb64a73dc05c428be40');
  debug('loaded license %j', decodedLicense);
  this.licenses.push(decodedLicense);
};

LicenseList.prototype.any = function any(product, feature, now) {
  debug('validating license for %s:%s@%j', product, feature, now);
  var result = this.licenses.some(covers);
  debug('result: %j', result);
  return result;

  function covers(lic) {
    debug('testing against %j', lic);
    return lic.covers(product, feature, now);
  }
};

LicenseList.prototype.first = function any(product, feature, now) {
  debug('validating license for %s:%s@%j', product, feature, now);
  var result = this.licenses.reduce(covers, false);
  debug('result: %j', result);
  return result;

  function covers(match, lic) {
    if (match) {
      return match;
    } else {
      debug('testing against %j', lic);
      return lic.covers(product, feature, now) && lic;
    }
  }
};

LicenseList.prototype.reload = function reload() {
  var self = this;
  debug('reloading licenses');
  this.loaders.forEach(function(loader) {
    loader().forEach(self.add, self);
  });
};
