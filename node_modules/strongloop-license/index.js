var fromEnv = require('./lib/env');
var fromFile = require('./lib/file');
var LicenseList = require('./lib/license-list');
var handlers = require('./lib/handlers');
var home = require('user-home');
var path = require('path');
var appRoot = require('./lib/approot');
var debug = require('debug')('strongloop-license');

var licEnvVar = 'STRONGLOOP_LICENSE';
var licFile = path.resolve(home || '',
                           path.join('.strongloop', 'licenses.json'));

var mainModule = appRoot(require.main);
var appLicFile = path.join(mainModule.dir, 'licenses.json');
debug('Application license file: %s', appLicFile);

module.exports = exports = validate;
exports.CONSOLE = handlers.CONSOLE;
exports.EXIT = handlers.EXIT;
exports.NOOP = handlers.NOOP;

var loaders = [
  function pkgLicenses() {
    // Read licenses from STRONGLOOP_LICENSE property of package.json
    var config = mainModule.package.config || {};
    var licStr = (config.strongloop && config.strongloop.license) ||
      config.strongLoopLicense ||
      config.StrongLoopLicense || config.STRONGLOOP_LICENSE || '';
    var parts = licStr.split(':');
    var lics = parts.filter(Boolean);
    debug('loaded %d licenses from package.json %s', lics.length, licStr);
    return lics;
  },
  function appLicenses() {
    return fromFile(appLicFile);
  },
  function envLicenses() {
    return fromEnv(licEnvVar);
  },
  function fileLicenses() {
    return fromFile(licFile);
  },
];

function validate(opts, callback) {
  opts = defaults(opts);
  var result = false;
  var licenses = new LicenseList(loaders);
  result = licenses.first(opts.product, opts.feature, opts.now);
  if (result) {
    result.details.key = result.key;
    result = result.details;
  }
  setImmediate(makeHandler(callback), null, opts.label, result);
  return result;
}

function defaults(opts) {
  if (typeof opts === 'string') {
    // match "product[:feature[=label]]"
    var parts = /^([^:=]+)(?::([^:=]+))?(?:=(.+))?$/.exec(opts);
    opts = {
      product: parts && parts[1],
      feature: parts && parts[2],
      label: parts && parts[3],
    };
  }
  var defaultLabel = opts.feature ? [opts.product, opts.feature].join(':')
                                  : opts.product;
  return {
    product: opts.product,
    feature: opts.feature,
    label: opts.label || defaultLabel,
    now: opts.now || new Date(),
    interval: opts.interval,
  };
}

function makeHandler(fnOrName) {
  if (typeof fnOrName === 'string') {
    fnOrName = handlers[fnOrName.toUpperCase()];
  }
  if (typeof fnOrName !== 'function') {
    fnOrName = handlers.CONSOLE;
  }
  return fnOrName;
}
